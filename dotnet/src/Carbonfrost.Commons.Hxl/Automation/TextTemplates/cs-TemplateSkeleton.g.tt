<#@ template language="C#" inherits="*/ partial class CSTemplateGenerator : TemplateBase" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System; /*" #>

#pragma warning disable CS8019

// File automatically generated at <#= DateTime.Now #>
namespace <#= Namespace #> {

using System;
using System.Linq;
using Carbonfrost.Commons.Hxl;
<# foreach (var u in this.Usings) { #>
using <#= u #>;
<# } #>

    [global::System.CodeDom.Compiler.GeneratedCode("<#= CodeGenerator #>", "<#= CodeGeneratorVersion #>")]
    [global::Carbonfrost.Commons.Hxl.HxlTemplate(Name = "<#= TemplateName #>")]
    <#= Accessibility #> partial class <#= ClassName #>
        : global::<#= BaseClass #>
<# if (this.HasDocument) { #>
          , global::Carbonfrost.Commons.Hxl.IHxlDocumentFragmentAccessor
<# } #>
    {

<# if (this.HasDocument) { #>
        private global::Carbonfrost.Commons.Hxl.HxlDocumentFragment __document;

        global::Carbonfrost.Commons.Hxl.HxlDocumentFragment global::Carbonfrost.Commons.Hxl.IHxlDocumentFragmentAccessor.DocumentFragment {
            get {
                if (!this.IsInitialized) {
                    this.Initialize();
                }

                return this.__document;
            }
        }
<# } #>

        private void InitializeComponent() {
<# if (this.InitializeComponent.Length > 0) { #>
            var __self = this;
<# } #>

<# if (this.HasDocument) { #>
            this.__document = new global::Carbonfrost.Commons.Hxl.HxlDocumentFragment();
<# } #>

        <# foreach (var decl in this.DomNodeVariables) { #>
            global::Carbonfrost.Commons.Web.Dom.DomNode @<#= decl #>;
        <# } #>
        <# foreach (var decl in this.DomObjectVariables) { #>
            global::Carbonfrost.Commons.Web.Dom.DomObject @<#= decl #>;
        <# } #>

            <#= InitializeComponent #>
        }

        <#= RenderIslands #>

        protected override void TransformTextCore() {
<# if (this.TransformTextCore.Length > 0) { #>
            var __self = this;
<# } #>
<# if (this.HasDocument) { #>
            this.__document.WriteTo(this.Output, this.TemplateContext);
<# } else { #>
            dynamic __closure = this.TemplateContext;
<# } #>
            <#= TransformTextCore #>
        }

        protected override void InitializeCore() {
            base.InitializeCore();
            this.InitializeComponent();
        }
    }
}
